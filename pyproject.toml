[tool.poetry]
name = "pymediator"
version = "0.1.0"
description = ""
authors = ["Sergio Torrado"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.10"

[tool.poetry.group.linters]
optional = true

[tool.poetry.group.linters.dependencies]
black = "^24.10.0"
isort = "^5.13.2"
pylint = "^3.3.1"
mypy = "^1.13.0"

[tool.poetry.group.tests]
optional = true

[tool.poetry.group.tests.dependencies]
pytest = "^8.3.3"
pytest-cov = "^6.0.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
extend-exclude = '''
/(
  | migrations
  | venv/
)/
'''

[tool.isort]
skip_glob = [
  "**/migrations/*",
  "**/venv/*",
  "**/.venv/*",
]
profile = "black"
multi_line_output = 3
force_grid_wrap = 0
use_parentheses = true
skip = "migrations"
default_section = "THIRDPARTY"
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
combine_as_imports = true
include_trailing_comma = true
not_skip = "__init__.py"

[tool.coverage.run]
omit = [
  "*/tests.py",
  "*/tests/*"
]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "raise NotImplementedError()"
]

[tool.mypy]
disallow_untyped_defs = true
no_implicit_optional = true
check_untyped_defs = true
exclude = [
  "migrations/",
  "venv/",
]

[tool.pylint]
max-line-length = 88
ignore = ["third_party"]
disable = [
    "R", "abstract-method", "apply-builtin", "arguments-differ", "attribute-defined-outside-init",
    "backtick", "bad-option-value", "basestring-builtin", "buffer-builtin", "c-extension-no-member",
    "consider-using-enumerate", "cmp-builtin", "cmp-method", "coerce-builtin", "coerce-method",
    "delslice-method", "div-method", "eq-without-hash", "execfile-builtin", "file-builtin",
    "filter-builtin-not-iterating", "fixme", "getslice-method", "global-statement", "hex-method",
    "idiv-method", "implicit-str-concat", "import-error", "import-self", "import-star-module-level",
    "input-builtin", "intern-builtin", "invalid-str-codec", "locally-disabled", "long-builtin",
    "long-suffix", "map-builtin-not-iterating", "misplaced-comparison-constant",
    "missing-function-docstring", "metaclass-assignment", "next-method-called", "next-method-defined",
    "no-absolute-import", "no-init", "no-member", "no-name-in-module", "no-self-use",
    "nonzero-method", "oct-method", "old-division", "old-ne-operator", "old-octal-literal",
    "old-raise-syntax", "parameter-unpacking", "print-statement", "raising-string",
    "range-builtin-not-iterating", "raw_input-builtin", "rdiv-method", "reduce-builtin",
    "relative-import", "reload-builtin", "round-builtin", "setslice-method", "signature-differs",
    "standarderror-builtin", "suppressed-message", "sys-max-int", "trailing-newlines",
    "unichr-builtin", "unicode-builtin", "unnecessary-pass", "unpacking-in-except",
    "useless-else-on-loop", "useless-suppression", "using-cmp-argument", "wrong-import-order",
    "xrange-builtin", "zip-builtin-not-iterating", "missing-class-docstring", "missing-module-docstring"
]

[tool.pylint.REPORTS]
output-format = "text"
reports = "no"
evaluation = "10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)"

[tool.pylint.FORMAT]
output-format = "text"
reports = "no"
expected-line-ending-format = "LF"

[tool.pylint.BASIC]
good-names = "main,_"
bad-names = ""
name-group = ""
include-naming-hint = "no"
property-classes = "abc.abstractproperty,cached_property.cached_property,cached_property.threaded_cached_property,cached_property.cached_property_with_ttl,cached_property.threaded_cached_property_with_ttl"
function-rgx = "^(?:(?P<exempt>setUp|tearDown|setUpModule|tearDownModule)|(?P<camel_case>_?[A-Z][a-zA-Z0-9]*)|(?P<snake_case>_?[a-z][a-z0-9_]*))$"
variable-rgx = "^[a-z][a-z0-9_]*$"
const-rgx = "^(_?[A-Z][A-Z0-9_]*|__[a-z0-9_]+__|_?[a-z][a-z0-9_]*)$"
attr-rgx = "^_{0,2}[a-z][a-z0-9_]*$"
argument-rgx = "^[a-z][a-z0-9_]*$"
class-attribute-rgx = "^(_?[A-Z][A-Z0-9_]*|__[a-z0-9_]+__|_?[a-z][a-z0-9_]*)$"
inlinevar-rgx = "^[a-z][a-z0-9_]*$"
class-rgx = "^_?[A-Z][a-zA-Z0-9]*$"
module-rgx = "^(_?[a-z][a-z0-9_]*|__init__)$"
method-rgx = "(?x)^(?:(?P<exempt>_[a-z0-9_]+__|runTest|setUp|tearDown|setUpTestCase|tearDownTestCase|setupSelf|tearDownClass|setUpClass|(test|assert)_*[A-Z0-9][a-zA-Z0-9_]*|next)|(?P<camel_case>_{0,2}[A-Z][a-zA-Z0-9_]*)|(?P<snake_case>_{0,2}[a-z][a-z0-9_]*))$"
no-docstring-rgx = "(__.*__|main|test.*|.*test|.*Test)$"
docstring-min-length = 12

[tool.pylint.TYPECHECK]
contextmanager-decorators = "contextlib.contextmanager,contextlib2.contextmanager"
ignored-modules = ""
generated-members = ""

[tool.pylint.LOGGING]
logging-modules = "logging,absl.logging,tensorflow.io.logging"

[tool.pylint.SIMILARITIES]
min-similarity-lines = 4
ignore-comments = "yes"
ignore-docstrings = "yes"
ignore-imports = "no"

[tool.pylint.SPELLING]
spelling-dict = ""
spelling-ignore-words = ""
spelling-private-dict-file = ""
spelling-store-unknown-words = "no"

[tool.pylint.IMPORTS]
deprecated-modules = "regsub, TERMIOS, Bastion, rexec, sets"
import-graph = ""
ext-import-graph = ""
int-import-graph = ""
known-standard-library = ""
known-third-party = "enchant, absl"
analyse-fallback-blocks = "no"

[tool.pylint.CLASSES]
defining-attr-methods = "__init__, __new__, setUp"
exclude-protected = "_asdict, _fields, _replace, _source, _make"
valid-classmethod-first-arg = "cls, class_"
valid-metaclass-classmethod-first-arg = "mcs"
